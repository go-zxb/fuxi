package api

import (
	"github.com/gin-gonic/gin"
	"{{.ModuleName}}/internal/model/{{.FilePath}}"
	service "{{.ModuleName}}/internal/service/{{.FilePath}}"
	"{{.ModuleName}}/pkg/response"
)

type {{.StructName}}Api struct {
	reply response.IResponse
	sv    *service.{{.StructName}}Service
}

func New{{.StructName}}Api(sv *service.{{.StructName}}Service) *{{.StructName}}Api {
	return &{{.StructName}}Api{reply: response.New(), sv: sv}
}

// GetSelfInfo
// @auth true
func (a *{{.StructName}}Api) GetSelfInfo(ctx *gin.Context) {
	uid := ctx.GetString("uid")
	list, err := a.sv.GetSelfInfo(uid)
	if err != nil {
		a.reply.New().WithCode(400).WithMessage(err.Error()).Fail(ctx)
		return
	}
	a.reply.New().WithCode(200).WithMessage("成功").WithData(list).Success(ctx)
}

// Login
// @model model.Login
func (a *{{.StructName}}Api) Login(ctx *gin.Context) {
	var oo model.Login
	if err := ctx.ShouldBindJSON(&oo); err != nil {
		a.reply.New().WithCode(400).WithMessage(err.Error()).Fail(ctx)
		return
	}
	token, err := a.sv.Login(&oo)
	if err != nil {
		a.reply.New().WithCode(400).WithMessage(err.Error()).Fail(ctx)
		return
	}
	a.reply.WithMessage("登录成功·欢迎回来").WithData(gin.H{"token": token}).Success(ctx)
}

// Register
// @model model.Login
func (a *{{.StructName}}Api) Register(ctx *gin.Context) {
	var oo model.{{.StructName}}
	if err := ctx.ShouldBindJSON(&oo); err != nil {
		a.reply.New().WithCode(400).WithMessage(err.Error()).Fail(ctx)
		return
	}
	err := a.sv.Register(&oo)
	if err != nil {
		a.reply.New().WithCode(400).WithMessage(err.Error()).Fail(ctx)
		return
	}
	a.reply.New().WithCode(200).WithMessage("成功").Success(ctx)
}
