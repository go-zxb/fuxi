package router

import (
	"github.com/gin-gonic/gin"
	"github.com/casbin/casbin/v2"
	api "{{.ModuleName}}/internal/api/{{.StructName}}"
	"{{.ModuleName}}/middleware"
	repo "{{.ModuleName}}/internal/repo/{{.StructName}}"
	service "{{.ModuleName}}/internal/service/{{.StructName}}"
)

type {{.StructName | initialLetter}}ApiInterface interface {
	Get{{.StructName | initialLetter}}List(ctx *gin.Context)
	Get{{.StructName | initialLetter}}(ctx *gin.Context)
	Create{{.StructName | initialLetter}}(ctx *gin.Context)
	Update{{.StructName | initialLetter}}(ctx *gin.Context)
	Delete{{.StructName | initialLetter}}(ctx *gin.Context)
}

type {{.StructName | initialLetter}}Router struct {
	engine *gin.Engine
	api    {{.StructName | initialLetter}}ApiInterface
	enforcer *casbin.CachedEnforcer
}


func New{{.StructName | initialLetter}}Router(engine *gin.Engine,enforcer *casbin.CachedEnforcer) *{{.StructName | initialLetter}}Router {
	return &{{.StructName | initialLetter}}Router{
		engine: engine,
		enforcer: enforcer,
		api: api.New{{.StructName | initialLetter}}Api(
			service.New{{.StructName | initialLetter}}Service(
				repo.New{{.StructName | initialLetter}}Repo(),
			),
		),
	}
}

// Init{{.StructName | initialLetter}}Router 初始化{{.StructName | initialLetter}}路由
func (r *{{.StructName | initialLetter}}Router) Init{{.StructName | initialLetter}}Router() {
{
    //v1
    groupV1:= r.engine.Group("api/v1")
    authGroupV1 := r.engine.Group("api/v1").Use(middleware.Casbin(r.enforcer))
    groupV1.GET("/{{.StructName}}s", r.api.Get{{.StructName | initialLetter}}List)
    groupV1.GET("/{{.StructName}}s/:id", r.api.Get{{.StructName | initialLetter}})
    authGroupV1.POST("/{{.StructName}}s", r.api.Create{{.StructName | initialLetter}})
    authGroupV1.PUT("/{{.StructName}}s", r.api.Update{{.StructName | initialLetter}})
    authGroupV1.DELETE("/{{.StructName}}s/:id", r.api.Delete{{.StructName | initialLetter}})
}
}
