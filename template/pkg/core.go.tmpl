package core

import (
	"fmt"
	"context"
	"errors"
	"time"
	"os"
	"os/signal"
  "syscall"
  "net/http"
	"github.com/gin-gonic/gin"
	"github.com/spf13/cobra"
	"{{.ModuleName}}/config"
	"{{.ModuleName}}/middleware"
	"{{.ModuleName}}/core/data"
	_ "{{.ModuleName}}/docs/openapi"
	swagFiles "github.com/swaggo/files"
  ginSwag "github.com/swaggo/gin-swagger"
	"log"
)

var GinServerCmd = &cobra.Command{
	Use:   "server",
	Short: "server",
	Long:  "server",
	Run:   Start,
}

var configPath string

func init() {
	GinServerCmd.Flags().StringVarP(&configPath, "config", "c", "config/config.yaml", "config file path")
}

type App struct {}

func NewApp() *App {
	return &App{}
}

// 初始化配置
func (a *App) initConf() *GinServer {
  // 初始化配置
	c, err := config.NewConfig(configPath)
	if err != nil {
		log.Fatalln("❎ 初始化配置失败:",err)
	}
	//初始化数据库
	_,err = data.InitMysql(*c)
  if err != nil {
    log.Fatalln("❎ 初始化MySQL数据库失败:",err)
  }
  log.Println("✅ 初始化MySQL成功🆗")
  //初始化redis
  	_, err = data.InitRedis(*c)
  	if err != nil {
  		log.Fatalln("❎ 初始化redis失败:", err)
  	}
  	log.Println("✅ 初始化Redis成功🆗")
  return &GinServer{c: c}
}

type GinServer struct {
	c *config.Config
}

// 启动服务
func (d *GinServer) initGinServer()  {
	engine := gin.Default()
	engine.Use(middleware.Cors())
	InitRouter(engine)
	engine.GET("/openapi/*any", ginSwag.WrapHandler(swagFiles.Handler))
  go func() {
      time.Sleep(time.Millisecond * 500)
      addr := fmt.Sprintf("http://%s:%d/openapi/index.html", d.c.Gin.Host, d.c.Gin.Port)
      if d.c.Gin.Host == "0.0.0.0" {
        addr = fmt.Sprintf("http://127.0.0.1:%d/openapi/index.html", d.c.Gin.Port)
      }
      fmt.Println("💻📒", " openapi api 文档地址：", addr)
    }()
  // 启动 Gin 服务
  	srv := &http.Server{
  		Addr:    fmt.Sprintf("%s:%d", d.c.Gin.Host, d.c.Gin.Port),
  		Handler: engine,
  	}

  	go func() {
  		if err := srv.ListenAndServe(); err != nil && !errors.Is(err, http.ErrServerClosed) {
  				fmt.Println("❎ 服务启动失败:", err)
  				os.Exit(1)
  		}
  	}()

  	// 捕获 SIGINT 信号
    	quit := make(chan os.Signal, 1)
    	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
    	<-quit
    	log.Println("关闭服务中...")

    	// 优雅关闭服务
    	if err := srv.Shutdown(context.Background()); err != nil {
    		log.Fatal("服务已被迫关闭:", err)
    	}

    	log.Println("服务已退出")
}

func InitRouter(engine *gin.Engine) {

}

func Start(cmd *cobra.Command, args []string) {
	NewApp().initConf().initGinServer()
}
